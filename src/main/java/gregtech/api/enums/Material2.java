package gregtech.api.enums;

import org.jetbrains.annotations.Nullable;

import gregtech.api.GregTechAPI;
import gregtech.api.enums.MaterialBuilder2.Flags;
import gregtech.api.fluid.GTFluidFactory;
import gregtech.api.interfaces.fluid.IGTRegisteredFluid;
import gregtech.api.metatileentity.implementations.MTECable;
import gregtech.api.metatileentity.implementations.MTEFluid;
import gregtech.api.metatileentity.implementations.MTEItem;
import gregtech.api.util.GTOreDictUnificator;
import gregtech.api.util.IntFraction;
import gregtech.common.blocks.BlockMetal2;
import it.unimi.dsi.fastutil.ints.Int2ObjectLinkedOpenHashMap;
import net.minecraft.item.ItemStack;
import net.minecraftforge.fluids.Fluid;
import net.minecraftforge.fluids.FluidStack;

public class Material2 implements IMaterial {
    
    private final MaterialBuilder2 builder;
    private Materials bridgeMaterial;

    private final Int2ObjectLinkedOpenHashMap<ItemStack> items = new Int2ObjectLinkedOpenHashMap<>();
    private final Fluid[] fluids = new Fluid[FluidType.VALUES.length];

    private Material2(MaterialBuilder2 builder) {
        this.builder = builder;
    }

    @Override
    public int getID() {
        return builder.id;
    }

    @Override
    public String getName() {
        return builder.name;
    }

    @Override
    public String getDefaultLocalName() {
        return builder.defaultLocalName;
    }

    @Override
    public short[] getRGBA() {
        return builder.colour;
    }

    @Override
    public ItemStack getItem(OrePrefixes prefix, int amount) {
        ItemStack out = items.get(prefix.ordinal());

        if (out == null) {
            return null;
        } else {
            out = out.copy();
            out.stackSize = amount;
            return out;
        }
    }

    @Override
    public FluidStack getFluid(FluidType fluid, int amount) {
        Fluid f = fluids[fluid.ordinal()];

        if (f == null) {
            return null;
        } else {
            return new FluidStack(f, amount);
        }
    }

    @Override
    public @Nullable Materials getLegacyMaterial() {
        return bridgeMaterial;
    }

    public void addStuff() {
        registerFluids();
        registerBlock();
    }

    public void discoverStuff() {
        registerMachines();

        for (Flags item : Flags.ITEMS) {
            OrePrefixes prefix = (OrePrefixes) item.getPrefix();
            ItemStack stack = GTOreDictUnificator.get(prefix.name() + builder.name, 1);
            
            if (stack != null) {
                items.put(prefix.ordinal(), stack);
            }
        }
    }

    private void registerFluids() {
        if (builder.hasFlag(Flags.GENERATE_FLUID)) {
            IGTRegisteredFluid fluid = GTFluidFactory.builder(builder.fluid.name)
                .withLocalizedName(builder.fluid.defaultLocalName)
                .withStateAndTemperature(FluidState.LIQUID, builder.fluid.temperature)
                .withColorRGBA(builder.fluid.colour)
                .withTextureName("autogenerated")
                .buildAndRegister()
                .configureMaterials(bridgeMaterial);

            if (builder.hasFlag(Flags.GENERATE_FLUID_CELLS)) {
                fluid.registerContainers(GTOreDictUnificator.get(OrePrefixes.cell, bridgeMaterial, 1L), ItemList.Cell_Empty.get(1L), builder.fluid.cellCapacity);
            }

            fluids[FluidType.Fluid.ordinal()] = fluid.asFluid();
        }

        if (builder.hasFlag(Flags.GENERATE_MOLTEN)) {
            IGTRegisteredFluid fluid = GTFluidFactory.builder(builder.molten.name)
                .withLocalizedName(builder.molten.defaultLocalName)
                .withStateAndTemperature(FluidState.MOLTEN, builder.molten.temperature)
                .withColorRGBA(builder.molten.colour)
                .withTextureName("molten.autogenerated")
                .buildAndRegister()
                .configureMaterials(bridgeMaterial);

            if (builder.hasFlag(Flags.GENERATE_MOLTEN_CELLS)) {
                fluid.registerContainers(GTOreDictUnificator.get(OrePrefixes.cellMolten, bridgeMaterial, 1L), ItemList.Cell_Empty.get(1L), builder.molten.cellCapacity);
            }

            fluids[FluidType.Molten.ordinal()] = fluid.asFluid();
        }

        if (builder.hasFlag(Flags.GENERATE_GAS)) {
            IGTRegisteredFluid fluid = GTFluidFactory.builder(builder.gas.name)
                .withLocalizedName(builder.gas.defaultLocalName)
                .withStateAndTemperature(FluidState.GAS, builder.gas.temperature)
                .withColorRGBA(builder.gas.colour)
                .withTextureName("autogenerated")
                .buildAndRegister()
                .configureMaterials(bridgeMaterial);

            if (builder.hasFlag(Flags.GENERATE_GAS_CELLS)) {
                fluid.registerContainers(GTOreDictUnificator.get(OrePrefixes.cell, bridgeMaterial, 1L), ItemList.Cell_Empty.get(1L), builder.gas.cellCapacity);
            }

            fluids[FluidType.Gas.ordinal()] = fluid.asFluid();
        }

        if (builder.hasFlag(Flags.GENERATE_PLASMA)) {
            IGTRegisteredFluid fluid = GTFluidFactory.builder(builder.plasma.name)
                .withLocalizedName(builder.plasma.defaultLocalName)
                .withStateAndTemperature(FluidState.PLASMA, builder.plasma.temperature)
                .withColorRGBA(builder.plasma.colour)
                .withTextureName("plasma.autogenerated")
                .buildAndRegister()
                .configureMaterials(bridgeMaterial);

            if (builder.hasFlag(Flags.GENERATE_PLASMA_CELLS)) {
                fluid.registerContainers(GTOreDictUnificator.get(OrePrefixes.cellPlasma, bridgeMaterial, 1L), ItemList.Cell_Empty.get(1L), builder.plasma.cellCapacity);
            }

            fluids[FluidType.Plasma.ordinal()] = fluid.asFluid();
        }
    }

    private void registerMachines() {
        int wireID = builder.wireStartID;

        if (registerWire(Flags.GENERATE_WIRE_1, 1, wireID)) wireID++;
        if (registerWire(Flags.GENERATE_WIRE_2, 2, wireID)) wireID++;
        if (registerWire(Flags.GENERATE_WIRE_4, 3, wireID)) wireID++;
        if (registerWire(Flags.GENERATE_WIRE_8, 4, wireID)) wireID++;
        if (registerWire(Flags.GENERATE_WIRE_12, 5, wireID)) wireID++;
        if (registerWire(Flags.GENERATE_WIRE_16, 6, wireID)) wireID++;

        if (registerCable(Flags.GENERATE_CABLE_1, 1, wireID)) wireID++;
        if (registerCable(Flags.GENERATE_CABLE_2, 2, wireID)) wireID++;
        if (registerCable(Flags.GENERATE_CABLE_4, 3, wireID)) wireID++;
        if (registerCable(Flags.GENERATE_CABLE_8, 4, wireID)) wireID++;
        if (registerCable(Flags.GENERATE_CABLE_12, 5, wireID)) wireID++;
        if (registerCable(Flags.GENERATE_CABLE_16, 6, wireID)) wireID++;

        int fluidID = builder.fluidPipeStartID;

        if (registerFluidPipe(Flags.GENERATE_PIPE_TINY_FLUID, 1, fluidID)) fluidID++;
        if (registerFluidPipe(Flags.GENERATE_PIPE_SMALL_FLUID, 2, fluidID)) fluidID++;
        if (registerFluidPipe(Flags.GENERATE_PIPE_NORMAL_FLUID, 3, fluidID)) fluidID++;
        if (registerFluidPipe(Flags.GENERATE_PIPE_LARGE_FLUID, 4, fluidID)) fluidID++;
        if (registerFluidPipe(Flags.GENERATE_PIPE_HUGE_FLUID, 5, fluidID)) fluidID++;
        if (registerFluidPipe(Flags.GENERATE_PIPE_QUADRUPLE_FLUID, 6, fluidID)) fluidID++;
        if (registerFluidPipe(Flags.GENERATE_PIPE_NONUPLE_FLUID, 7, fluidID)) fluidID++;
        
        int itemID = builder.itemPipeStartID;

        if (registerItemPipe(Flags.GENERATE_PIPE_TINY_ITEM, 1, itemID, false)) itemID++;
        if (registerItemPipe(Flags.GENERATE_PIPE_SMALL_ITEM, 2, itemID, false)) itemID++;
        if (registerItemPipe(Flags.GENERATE_PIPE_NORMAL_ITEM, 3, itemID, false)) itemID++;
        if (registerItemPipe(Flags.GENERATE_PIPE_LARGE_ITEM, 4, itemID, false)) itemID++;
        if (registerItemPipe(Flags.GENERATE_PIPE_HUGE_ITEM, 5, itemID, false)) itemID++;
        if (registerItemPipe(Flags.GENERATE_PIPE_TINY_RESTRICTIVE_ITEM, 1, itemID, true)) itemID++;
        if (registerItemPipe(Flags.GENERATE_PIPE_SMALL_RESTRICTIVE_ITEM, 2, itemID, true)) itemID++;
        if (registerItemPipe(Flags.GENERATE_PIPE_NORMAL_RESTRICTIVE_ITEM, 3, itemID, true)) itemID++;
        if (registerItemPipe(Flags.GENERATE_PIPE_LARGE_RESTRICTIVE_ITEM, 4, itemID, true)) itemID++;
        if (registerItemPipe(Flags.GENERATE_PIPE_HUGE_RESTRICTIVE_ITEM, 5, itemID, true)) itemID++;
    }

    private boolean registerWire(Flags flag, int tier, int id) {
        if (!builder.hasFlag(flag)) return false;
        if (!(flag.getPrefix() instanceof OrePrefixes prefix)) return false;

        int mult = switch (tier) {
            case 1 -> 1;
            case 2 -> 2;
            case 3 -> 4;
            case 4 -> 8;
            case 5 -> 12;
            case 6 -> 16;
            default -> throw new IllegalArgumentException("tier");
        };

        MTECable cable = new MTECable(
            id,
            String.format("wire.%s.%d", builder.name, mult),
            String.format("%dx %s Wire", mult, builder.defaultLocalName),
            0.125f * tier,
            bridgeMaterial,
            builder.wireBaseLoss,
            builder.baseAmperage * mult,
            builder.maxVoltage,
            false,
            builder.wireShocks);

        GTOreDictUnificator.registerOre(prefix, bridgeMaterial, cable.getStackForm(1L));
        items.put(prefix.ordinal(), cable.getStackForm(1L));

        return true;
    }

    private boolean registerCable(Flags flag, int tier, int id) {
        if (!builder.hasFlag(flag)) return false;
        if (!(flag.getPrefix() instanceof OrePrefixes prefix)) return false;

        int mult = switch (tier) {
            case 1 -> 1;
            case 2 -> 2;
            case 3 -> 4;
            case 4 -> 8;
            case 5 -> 12;
            case 6 -> 16;
            default -> throw new IllegalArgumentException("tier");
        };

        MTECable cable = new MTECable(
            id,
            String.format("cable.%s.%d", builder.name, mult),
            String.format("%dx %s Cable", mult, builder.defaultLocalName),
            0.125f * (tier + 1),
            bridgeMaterial,
            builder.cableBaseLoss,
            builder.baseAmperage * mult,
            builder.maxVoltage,
            true,
            false);

        GTOreDictUnificator.registerOre(prefix, bridgeMaterial, cable.getStackForm(1L));
        items.put(prefix.ordinal(), cable.getStackForm(1L));

        return true;
    }

    private boolean registerFluidPipe(Flags flag, int mult, int id) {
        if (!builder.hasFlag(flag)) return false;
        if (!(flag.getPrefix() instanceof OrePrefixes prefix)) return false;

        String pipeName = switch(mult) {
            case 1 -> "Tiny";
            case 2 -> "Small";
            case 3 -> "";
            case 4 -> "Large";
            case 5 -> "Huge";
            case 6 -> "Quadruple";
            case 7 -> "Nonuple";
            default -> throw new IllegalArgumentException("mult");
        };

        MTEFluid pipe = new MTEFluid(
            id,
            String.format("GT_Pipe_%s_%s", builder.name, pipeName),
            String.format("%s %s Fluid Pipe", pipeName, builder.defaultLocalName),
            switch(mult) {
                case 1 -> 0.25f;
                case 2 -> 0.375f;
                case 3 -> 0.5f;
                case 4 -> 0.75f;
                case 5 -> 0.875f;
                case 6 -> 1f;
                case 7 -> 1f;
                default -> throw new IllegalArgumentException("mult");
            },
            bridgeMaterial,
            switch (mult) {
                case 1 -> builder.baseCapacity / 6;
                case 2 -> builder.baseCapacity / 3;
                case 3 -> builder.baseCapacity;
                case 4 -> builder.baseCapacity * 2;
                case 5 -> builder.baseCapacity * 4;
                case 6 -> builder.baseCapacity;
                case 7 -> builder.baseCapacity / 3;
                default -> throw new IllegalArgumentException("mult");
            },
            builder.maxTemp,
            builder.gasProof);

        GTOreDictUnificator.registerOre(prefix, bridgeMaterial, pipe.getStackForm(1L));
        items.put(prefix.ordinal(), pipe.getStackForm(1L));
    
        return true;
    }

    private boolean registerItemPipe(Flags flag, int mult, int id, boolean restrictive) {
        if (!builder.hasFlag(flag)) return false;
        if (!(flag.getPrefix() instanceof OrePrefixes prefix)) return false;

        String pipeName = switch(mult) {
            case 1 -> "Tiny";
            case 2 -> "Small";
            case 3 -> "";
            case 4 -> "Large";
            case 5 -> "Huge";
            default -> throw new IllegalArgumentException("mult");
        };

        IntFraction speed = builder.pipeStacksPerSecond.clone();
        int stepSize = 32768;
        // seconds to ticks
        speed.div(20);

        switch (mult) {
            case 1: {
                speed.div(4);
                stepSize *= 4;
                break;
            }
            case 2: {
                speed.div(2);
                stepSize *= 2;
                break;
            }
            case 3: {
                // do nothing
                break;
            }
            case 4: {
                speed.mul(2);
                stepSize /= 2;
                break;
            }
            case 5: {
                speed.mul(4);
                stepSize /= 4;
                break;
            }
        }

        if (speed.toFloat() < 0.05f) {
            speed.reduce();
        }

        stepSize /= speed.numerator;

        MTEItem pipe = new MTEItem(
            id,
            String.format("GT_Pipe_%s_%s", builder.name, pipeName),
            String.format("%s %s Item Pipe", pipeName, builder.defaultLocalName),
            switch(mult) {
                case 1 -> 0.25f;
                case 2 -> 0.375f;
                case 3 -> 0.5f;
                case 4 -> 0.75f;
                case 5 -> 0.875f;
                default -> throw new IllegalArgumentException("mult");
            },
            bridgeMaterial,
            (int) speed.numerator,
            stepSize,
            restrictive,
            (int) speed.denominator);

        GTOreDictUnificator.registerOre(prefix, bridgeMaterial, pipe.getStackForm(1L));
        items.put(prefix.ordinal(), pipe.getStackForm(1L));
    
        return true;
    }

    private void registerBlock() {
        if (builder.hasFlag(Flags.GENERATE_BLOCK)) {
            if (builder.customBlockTexture != null) {
                BlockMetal2.register(this, builder.customBlockTexture);

                if (builder.blockTexture != null) {
                    throw new IllegalStateException("Cannot set customBlockTexture and blockTexture at the same time");
                }
            } else if (builder.blockTexture != null) {
                BlockMetal2.register(this, builder.textureSet, builder.blockTexture);
            } else {
                throw new IllegalStateException("Either customBlockTexture or blockTexture must be set to generate a block");
            }
        }
    }

    public static Material2 fromBuilder(MaterialBuilder2 builder) {
        Material2 material = new Material2(builder);

        Materials bridge = new Materials(
            builder.id,
            builder.textureSet,
            builder.tools == null ? -1 : builder.tools.toolSpeed,
            builder.tools == null ? -1 : builder.tools.durability,
            builder.tools == null ? -1 : builder.tools.toolQuality,
            256, /* empty */
            builder.colour[0],
            builder.colour[1],
            builder.colour[2],
            builder.colour[3],
            builder.name,
            builder.defaultLocalName,
            builder.fuelType == null ? -1 : builder.fuelType.ordinal(),
            builder.fuelPower,
            0,
            2000000,
            false,
            builder.hasFlag(Flags.GENERATE_LENS),
            0,
            1,
            1,
            builder.lensColour,
            "ore",
            false,
            "null") {

            @Override
            public Boolean shouldGeneratePrefix(OrePrefixes prefix) {
                return builder.generatesPrefix(prefix);
            }
        };

        bridge.mIsBridge = true;

        material.bridgeMaterial = bridge;

        return material;
    }
}
